import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import styles from "./index.module.css";
import { Group, NumberInput, Slider, TextInput } from "@mantine/core";
import { useEffect, useState } from "react";

export default function Home() {
  const [homozygousDominant, setHomozygousDominant] = useState(0.25);
  const [heterozygous, setHeterozygous] = useState(0.5);
  const [homozygousRecessive, setHomozygousRecessive] = useState(0.25);
  const [dominantPhenotype, setDominantPhenotype] = useState(
    homozygousDominant + heterozygous
  );
  const [recessivePhenotype, setRecessivePhenotype] =
    useState(homozygousRecessive);

  const updateValues = (newP: number, newQ: number) => {
    setHomozygousDominant(newP * newP);
    setHeterozygous(2 * newP * newQ);
    setHomozygousRecessive(newQ * newQ);
    // set phenotypes
    // setDominantPhenotype(newP * newP + 2 * newP * newQ);
    // setRecessivePhenotype(newQ * newQ);
  };

  useEffect(() => {
    const newP = Math.sqrt(dominantPhenotype - recessivePhenotype);
    const newQ = Math.sqrt(recessivePhenotype);
    updateValues(newP, newQ);
  }, [dominantPhenotype, recessivePhenotype]);

  useEffect(() => {
    const newP = homozygousDominant + heterozygous / 2;
    const newQ = 1 - newP;
    updateValues(newP, newQ);
  }, [homozygousDominant]);

  useEffect(() => {
    const newQ = 1 - (homozygousDominant + heterozygous / 2);
    const newP = 1 - newQ;
    updateValues(newP, newQ);
  }, [heterozygous]);

  useEffect(() => {
    const newQ = Math.sqrt(homozygousRecessive);
    const newP = 1 - newQ;
    updateValues(newP, newQ);
  }, [homozygousRecessive]);

  useEffect(() => {
    const newP = Math.sqrt(dominantPhenotype);
    const newQ = Math.sqrt(1 - dominantPhenotype); // Because dominant + recessive should be 1
    updateValues(newP, newQ);
    setRecessivePhenotype(1 - dominantPhenotype); // Ensure they sum to 1
  }, [dominantPhenotype]);
  
  useEffect(() => {
    const newQ = Math.sqrt(recessivePhenotype);
    const newP = Math.sqrt(1 - recessivePhenotype); // Because dominant + recessive should be 1
    updateValues(newP, newQ);
    setDominantPhenotype(1 - recessivePhenotype); // Ensure they sum to 1
  }, [recessivePhenotype]);

  return (
    <>
      <Head>
        <title>Hardy-Weinberg Solver</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1 className={styles.title}>
            Simple <span className={styles.pinkSpan}>Hardy-Weinberg</span>{" "}
            Solver
          </h1>
          <div className={styles.cardRow}>
            <div className={styles.card}>
              <Group noWrap>
                <h3 className={styles.cardTitle}>Genotype</h3>
              </Group>
              <p className={styles.cardText}>
                Homozygous Dominant (AA): {Math.round(homozygousDominant * 100)}
                %
              </p>
              <Slider
                label="Homozygous Dominant"
                placeholder="0.15"
                min={0}
                max={1}
                step={0.01}
                value={homozygousDominant}
                onChange={setHomozygousDominant}
              />
              <p className={styles.cardText}>
                Heterozygous (Aa): {Math.round(heterozygous * 100)}%
              </p>
              <Slider
                label="Heterozygous"
                placeholder="0.15"
                min={0}
                max={1}
                step={0.01}
                value={heterozygous}
                onChange={setHeterozygous}
              />
              <p className={styles.cardText}>
                Homozygous Recessive (aa):{" "}
                {Math.round(homozygousRecessive * 100)}%
              </p>
              <Slider
                label="Homozygous Recessive"
                placeholder="0.15"
                min={0}
                max={1}
                step={0.01}
                value={homozygousRecessive}
                onChange={setHomozygousRecessive}
              />
            </div>
            <div className={styles.card}>
              <h3 className={styles.cardTitle}>Phenotype</h3>
              <p className={styles.cardText}>
                Dominant: {Math.round(dominantPhenotype * 100)}%
              </p>
              <Slider
                label="Dominant"
                min={0}
                max={1}
                step={0.01}
                value={dominantPhenotype}
                onChange={setDominantPhenotype}
              />
              <p className={styles.cardText}>
                Recessive: {Math.round(recessivePhenotype * 100)}%
              </p>
              <Slider
                label="Recessive"
                min={0}
                max={1}
                step={0.01}
                value={recessivePhenotype}
                onChange={setRecessivePhenotype}
              />
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
